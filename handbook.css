/* how css look like */
p {
    font-size: 20px;
}

/* Multiple rules are stacked one after the other */

p {
    font-size: 20px;
}
a {
    color: blue;
}

/* how to adding CSS to a HTML */
/* using the link tag via below */
<link rel="stylesheet" type="text/css" href="yourcssfile.css">

/* comment */
/* this is a comment */

/* or you can using the style tag in HTML */
<style>
    adapt your CSS
</style>

/* Basic selectors */
/* Classes are identified using the . symbol, while ids using the # symbol. */

/* Example using a class: */
/* in HTML */
<p class="one">One</p>

/* in CSS */
.one {
  color: yellow;
}

/* Example using an id: */
/* in HTML */
<p id="one">One</p>

/* in CSS */
#one {
  color: yellow;
}

/* Combining selectors */
/* Targeting an element with a class or id */

/* Example using a class: */
<p class="one">One</p>

/* in CSS */
p.one {
  color: yellow;
}

/* Example using an id: */
/* in HTML */
<p id="one">One</p>

/* in CSS */
p#one {
  color: yellow;
}

/* Targeting multiple classes */

/* Example: */
/* in HTML */
<p class="one two">One</p>

/* in CSS */
.one.two {
  color: yellow;
}

/* Combining classes and ids */

/* Example: */
/* in HTML */
<p class="one" id="two">One</p>

/* in CSS */
.one \#two {
  color: yellow;
}

/* Grouping selectors */

/* Example: */
/* in HTML */
<p>My cat name is:</p>
<span class="cat-name"> One </span>

/* in CSS */
p,
.cat-name {
  color: blue;
}

/* Follow the document tree with selectors */

/* Example: */
/* in HTML */
<span> Hello! </span>
<p>
  My cat name is:
  <span class="cat-name"> One </span>
</p>

/* in CSS - 1 */
p span {
    color: yellow;
}

/* in CSS - 2 */
p > span {
    color: yellow;
}

/* Importance */
p {
    font-size: 20px !important;
}

/* Import */
/* Here is how you use it: */
@import url(myfile.css);

/* url() */
/* background image with url */
/* Example: */
div {
    background-image: url(test.png);
}
/* use link */
div {
    background-image: url(https://mysite.com/test.png);
  }

/* background color */
p {
    background-color: yellow;
}
div {
      background-color: #333;
}

/* background position */
div {
    background-position: top right;
}

/* background-attachment = fix background when scrolling the page background not move */
div {
    background-attachment: fixed;
}

/* background-size */
div {
    background-size: 100%;
}
/* or */
div {
    background-size: 800px 600px;
}

/* set a gradient as background */
div {
    background: linear-gradient(#fff, #333);
}

/* The basics of using variables */
/* A CSS Variable is defined with a special syntax, prepending two dashes to a */
/* name ( --variable-name ), then a colon and a value. Like this: */
/* Example */
:root {
    --primary-color: yellow;
}
/* or can access the variable value using var() */
p {
    color: var(--primary-color);
}

/* font family */

/* Example */
body {
    font-family: Helvetica;
}

/* can add multiple */
/* Example */
body {
    font-family: Helvetica, Arial;
}

/* font-weight */
-normal
-bold
-bolder (relative to the parent element) 
-lighter (relative to the parent element)
- 100, 200,300, 400 = normal, 500, 600, 700 = bold, 800, 900

/* font-style */
/* Example */
p {
    font-style: italic;
}

/* font-size */
/* Example */
p{
    font-size: 20px;
}
li {
      font-size: medium;
}

/* font */
/* font order  */

font: <font-stretch> <font-style> <font-variant> <font-weight> <font-size <line-height> <font-family>;

/* Example: */
body {
    font: italic bold 20px Helvetica;
}
section {
    font: small-caps bold 20px Helvetica;
}

/* Typography */
text-transform
/* capitalize to uppercase the first letter of each word 
uppercase to uppercase all the text
lowercase to lowercase all the text
none to disable transforming the text, used to avoid inheriting the property */

/* Example: */

p {
    text-transform: uppercase;
}

text-decoration
/* underline
overline
line-through
blink
none */

/* Example: */
p {
    text-decoration: underline;
}

/* can also set the style of the decoration, and the color */
p {
    text-decoration: underline dashed yellow;
}

/* Valid style values are solid , double , dotted , dashed , wavy . */
p {
    text-decoration-line: underline; 
    text-decoration-color: yellow; 
    text-decoration-style: dashed;
}

text-align
/* start , end , left , right , center , justify */

/* Example: */
p {
    text-align: right;
}


vertical-align
/* -baseline (the default), aligns the baseline to the baseline of the parent element
-sub makes an element subscripted, simulating the sub HTML element result
-super makes an element superscripted, simulating the sup HTML element result
-top align the top of the element to the top of the line
-text-top align the top of the element to the top of the parent element font
-middle align the middle of the element to the middle of the line of the parent
-bottom align the bottom of the element to the bottom of the line
-text-bottom align the bottom of the element to the bottom of the parent element font */

/* line-height */
/* Example: */
p {
    line-height: 0.9rem;
}

text-indent
/* Example: */
p {
    text-indent: -10px;
}

text-align-last
/* Example: */
p {
    text-align-last: right;
}

word-spacing
/* Example: */
p {
    word-spacing: 2px;
}
span {
    word-spacing: -0.2em;
}
letter-spacing
/* Example: */
p{
    letter-spacing: 0.2px;
}
span {
    letter-spacing: -0.2em;
}

text-shadow
/* the X offset of the shadow from the text 
the Y offset of the shadow from the text 
the blur radius */

white-space
/* normal
nowrap
pre-line */

tab-size
/* Example: */
p{
    tab-size: 2;
}
span {
    tab-size: 4px;
}

writing-mode
/* horizontal-tb
vertical-rl
vertical-lr */

hyphens
/* none
manual
auto */

text-orientation
/* mixed
upright
sideways */

direction
ltr = left to :right
rtl = right to :left
/* Example: */
p{
    direction: rtl;
}

word-break
/* normal
break-all
keep-all */

overflow-wrap
/* Example: */
p {
    overflow-wrap: break-word;
}
/* or */
p {
    overflow-wrap: anywhere;
}

Box Model

Border
-border-style
-border-color
-border-width

The border style
dotted
dashed
solid
double
groove
ridge
inset
outset
none
hidden

/* can set differnt style as below */
border-top-style
border-right-style
border-bottom-style
border-left-style

/* Example: */
p {
    border-style: solid dotted solid dotted;
}

The border width
thin
medium
thick

/* Example: */
p {
    border-width: 2px;
}

/* set the width of each edge (Top-Right-Bottom-Left) separately by using 4 values */

/* Example: */
p {
    border-width: 2px 1px 2px 1px;
}

The border color

/* Example: */
p {
    border-color: yellow;
}

/* set the color of each edge (Top-Right-Bottom-Left) separately by using 4 values: */

/* Example: */
p { 
    border-color: black red yellow blue;
}

The border shorthand property

/* Example: */

p {
    border: 2px black solid;
}

can use the edge-specific properties border-top , border-right , border-bottom , border-left

/* Example: */
p {
    border-left: 2px black solid; border-right: 3px red dashed;
}    

The border radius = can also use the edge-specific properties border-top-left-radius , border-top-right-radius , border-bottom-left-radius , border-bottom-right-
radius

/* Example: */
p {
    border-radius: 3px;
}

Using images as borders
border-image-source
border-image-slice
border-image-width
border-image-outset
border-image-repeat

Padding
padding-top
padding-right
padding-bottom
padding-left

/* Example: */
padding-left: 30px;
padding-right: 3em;

Using the padding shorthand

Using a single value applies that to all the paddings: top, right, bottom, left.
/* Example: */
padding: 20px;

Using 2 values applies the first to bottom & top, and the second to left & right.
/* Example: */
padding: 20px 10px;

Using 3 values applies the first to top, the second to left & right, the third to bottom.
/* Example: */
padding: 20px 10px 30px;

Using 4 values applies the first to top, the second to right, the third to bottom, the fourth to left
/* Example: */
padding: 20px 10px 5px 0px;

Margin
margin-top
margin-right
margin-bottom
margin-left

/* Example: */
margin-left: 30px;
margin-right: 3em;

Using the margin shorthand

Using a single value applies that to all the margins: top, right, bottom, left.
/* Example: */
margin: 20px;

Using 2 values applies the first to bottom & top, and the second to left & right.
/* Example: */
margin: 20px 10px;

Using 3 values applies the first to top, the second to left & right, the third to bottom.
/* Example: */
margin: 20px 10px 30px;

Using 4 values applies the first to top, the second to right, the third to bottom, the fourth to left
/* Example: */
margin: 20px 10px 5px 0px;

Using auto to center elements
/* Example: */
margin: 0 auto;

Box Sizing
border-box
content-box

/* Example: */
.my-div {
    box-sizing: border-box;
}

recommended to apply it to every element on the page, out of the box, with this:
/* Example: */
*,
*:before,
*:after {
  box-sizing: border-box;
}

Display

block
normally elements are displayed inline, with the exception of some elements, including = all of this which are set as block by the browser.
div
p
section
ul

inline
Inline is the default display value for every element in CSS.
inline-block
similar to inline , but with and height are applied as you specified
inline-table
inline-flex
inline-grid
inline-list-item

none
Using display: none makes an element disappear. It's still there in the HTML, but just not visible in the browser.

contents
flow
flow-root
table (and all the ones)
flex
grid
list-item



Positioning
static
This is the default value for an element. Static positioned elements are displayed in the normal page flow.

relative
top right bottom left

/* Example: */
/* in HTML */
<div class="parent">
  <div class="child">
    <div class="box">
      <p>Test</p>
    </div>
  </div>
</div>

/* in CSS */
/* Example: */
.parent {
    background-color: #af47ff;
    padding: 30px;
    width: 300px;
}
  .child {
    background-color: #ff4797;
    padding: 30px;
}
  .box {
    background-color: #f3ff47;
    padding: 30px;
    border: 2px solid #333;
    border-style: dotted;
    font-family: courier;
    text-align: center;
    font-size: 2rem;
}

absolute
/* Example: */
.box {
    /* ... */
    position: absolute;
}

fixed
/* Example: */
.box {
    /* ... */
    position: fixed;
}

Floating
left
right
none

/* Example: */
img {
    float: left;
    padding: 20px 20px 0px 0px;
  }

Clearing
left
right
both
none

/* Example: */
img {
    float: left;
    clear: left;
    padding: 20px 20px 0px 0px;
  }

z-index

/* Example: */

.my-first-div {
    position: absolute;
    top: 0;
    left: 0;
    width: 600px;
    height: 600px;
    z-index: 10;
  }
  .my-second-div {
    position: absolute;
    top: 0;
    left: 0;
    width: 500px;
    height: 500px;
    z-index: 20;
  }

CSS Grid
/* The CSS Grid layout is activated on a container element (which can be a div or any other tag) by setting display: grid
The most basic container properties are grid-template-columns and grid-
template-rows . */

/* Example: */

.container {
    display: grid;
    grid-template-columns: 200px 200px 200px 200px;
    grid-template-rows: 300px 300px;
  }

/* = have 4 columns-200 px and 2 rows-300 px */

Grid: Automatic dimensions

/* Example: */
.container {
    display: grid;
    grid-template-rows: 100px auto 100px;
  }

  Grid: Different columns and rows dimensions

/* Example: */
  .container {
    display: grid;
    grid-template-columns: 100px 200px;
    grid-template-rows: 100px 50px;
  }

Grid: Adding space between the cells
grid-column-gap
grid-row-gap

/* Example: */
.container {
    display: grid;
    grid-template-columns: 100px 200px;
    grid-template-rows: 100px 50px;
    grid-column-gap: 25px;
    grid-row-gap: 25px;
  }

shorthand Syntax

/* Example: */
  .container {
    display: grid;
    grid-template-columns: 100px 200px;
    grid-template-rows: 100px 50px;
    grid-gap: 25px;
  }
Grid: pawning items on multiple columns and/or rowspawning items on multiple columns and/or rows
properties:
grid-column-start
grid-column-end
grid-row-start
grid-row-end

/* Example: */
.container {
    display: grid;
    grid-template-columns: 200px 200px 200px 200px;
    grid-template-rows: 300px 300px;
  } .item1 {
    grid-column-start: 2;
    grid-column-end: 4;
  }
  .item6 {
    grid-column-start: 3;
    grid-column-end: 5;
  }

Shorthand Syntax
grid-column
grid-row

/* Example: */
.container {
    display: grid;
    grid-template-columns: 200px 200px 200px 200px;
    grid-template-rows: 300px 300px;
  } .item1 {
    grid-column: 2 / 4;
  }
  .item6 {
    grid-column: 3 / 5;
  }

Grid: Using fractions

The following example divides a grid into 3 columns with the same width, 1/3 of the available space each.

/* Example: */
.container {
    grid-template-columns: 1fr 1fr 1fr;
  }

Grid:  Using percentages and rem

You can also use percentages, and mix and match fractions, pixels, rem and percentages:

/* Example: */
.container {
    grid-template-columns: 3rem 15% 1fr 2fr;
  }

Grid:  Using repeat()

repeat() is a special function that takes a number that indicates the number
of times a row/column will be repeated, and the length of each one.
If every column has the same width you can specify the layout using this syntax:

/* Example: */
.container {
    grid-template-columns: repeat(4, 100px);
  }

  This creates 4 columns with the same width. Or using fractions:

/* Example: */
  .container {
    grid-template-columns: repeat(4, 1fr);
  }

Grid:  Specify a minimum width for a row

Common use case: Have a sidebar that never collapses more than a certain amount of pixels when you resize the window.

Here's an example where the sidebar takes 1/4 of the screen and never takes less than 200px:

.container {
    grid-template-columns: minmax(200px, 3fr) 9fr;
  }

You can also set just a maximum value using the auto keyword:

.container {
    grid-template-columns: minmax(auto, 50%) 9fr;
  }

or just a minimum value:

.container {
    grid-template-columns: minmax(100px, auto) 9fr;
  }

Grid: Positioning elements using grid- template-areas

/* Example: */
/* in HTML */
<div class="container">
  <main>...</main>
  <aside>...</aside>
  <header>...</header>
  <footer>...</footer>
</div>

/* Example: */
/* in CSS */
.container {
    display: grid;
    grid-template-columns: 200px 200px 200px 200px;
    grid-template-rows: 300px 300px;
    grid-template-areas:
      'header header header header'
      'sidebar main main main'
      'footer footer footer footer';
  } 
  main {
    grid-area: main;
  }
  aside {
    grid-area: sidebar;
  } 
  header {
    grid-area: header;
  }
  footer {
    grid-area: footer;
  }

Grid:  Adding empty cells in template areas
You can set an empty cell using the dot . instead of an area name in grid- template-areas :

/* Example: */
.container {
    display: grid;
    grid-template-columns: 200px 200px 200px 200px;
    grid-template-rows: 300px 300px;
    grid-template-areas:
      '. header header .'
      'sidebar . main main'
      '. footer footer .';
  }

Grid:  Fill a page with a grid

/* Example: */
.container {
    display: grid;
    height: 100vh;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr;
  }

Grid: An example: header, sidebar, content and footer

/* Example: */
/* in HTML */
<div class="wrapper">
  <header>Header</header>
  <article>
    <h1>Welcome</h1>
    <p>Hi!</p>
  </article>
  <aside>
    <ul>
      <li>Sidebar</li>
    </ul>
  </aside>
  <footer>Footer</footer>
</div>

/* Example: */
/* in CSS */
header {
    grid-area: header;
    background-color: #fed330;
    padding: 20px;
  } 
article {
    grid-area: content;
    background-color: #20bf6b;
    padding: 20px;
  } 
aside {
    grid-area: sidebar;
    background-color: #45aaf2;
  }
footer {
    padding: 20px;
    grid-area: footer;
    background-color: #fd9644;
  } 
.wrapper {
    display: grid;
    grid-gap: 20px;
    grid-template-columns: 1fr 3fr;
    grid-template-areas:
      'header  header'
      'sidebar content'
      'footer  footer';
  }

When the layout is smaller we can put the sidebar below the content using a media query:

/* Example: */
@media (max-width: 500px) {
    .wrapper {
      grid-template-columns: 4fr;
      grid-template-areas:
        'header'
        'content'
        'sidebar'
        'footer';
  } }